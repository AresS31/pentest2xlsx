#!/usr/bin/env python3
#    Copyright (C) 2019 Alexandre Teyar

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
#    limitations under the License.

# TODO:
# * add a "File" column

from . import config
from ..parser import Parser
from pathlib import Path

import json
import logging
import xlsxwriter


class Testssl(Parser):
    def __init__(self, input_files, output_file):
        super(Testssl, self).__init__(input_files, output_file)

    def print_vars(self):
        logging.info("input file(s): {}".format(
            sorted([x.name for x in self._input_files])))
        logging.info("output file: {}".format(self._output_file))
        logging.info("certificate issue(s) to process: {}".format(
            sorted(config.certificates.keys())))
        logging.info("protocol(s) to process: {}".format(
            sorted(config.protocols)))
        logging.info("vulnerability/ies to process: {}".format(
            sorted(config.vulnerabilities.keys())))
        print()

    def parse(self):
        logging.info("generating worksheet 'Host vs Certificate (Details)'...")
        self.parse_host_certificate()
        print()
        logging.info("generating worksheet 'Host vs Certificates'...")
        self.parse_host_certificates()
        print()
        logging.info("generating worksheet 'Host vs Protocol (Details)'...")
        self.parse_host_protocol()
        print()
        logging.info("generating worksheet 'Host vs Protocols'...")
        self.parse_host_protocols()
        print()
        logging.info("generating worksheet 'Host vs Vulnerability (Details)'...")
        self.parse_host_vulnerability()
        print()
        logging.info("generating worksheet 'Host vs Vulnerabilities'...")
        self.parse_host_vulnerabilities()
        print()

        try:
            self._workbook.close()
        except Exception as e:
            logging.exception("{}".format(e))

    def parse_host_certificate(self):
        table_data = []
        table_headers = [
            {"header": "File"},
            {"header": "Host IP"},
            {"header": "Host DNS"},
            {"header": "Port"},
            {"header": "Vulnerability"},
            {"header": "Severity"},
            {"header": "Information"}
        ]

        for input_file in self._input_files:
            input_file.seek(0)
            host_certificates = get_host_certificates(input_file)

            for values in host_certificates:
                for certificates in values["certificates"]:
                    table_data.append(
                        [
                            values["filepath"],
                            values["host_ip"],
                            values["host_dns"],
                            int(values["port"]),
                            certificates["vulnerability"],
                            certificates["severity"],
                            certificates["information"]
                        ]
                    )

        worksheet = self._workbook.add_worksheet("Host vs Certificate (Details)")
        self.draw_table(worksheet, table_headers, table_data)

    def parse_host_certificates(self):
        table_data = []
        table_headers = [
            {"header": "File"},
            {"header": "Host IP"},
            {"header": "Host DNS"},
            {"header": "Port"}
        ]

        for values in config.certificates.values():
            table_headers.append({"header": values["name"]})

        try:
            for input_file in self._input_files:
                input_file.seek(0)
                host_certificates = get_host_certificates(input_file)

                for values in host_certificates:
                    table_data.append(reindex(table_headers, values))

            worksheet = self._workbook.add_worksheet("Host vs Certificates")
            self.draw_table(worksheet, table_headers, table_data)
        except KeyError as e:
            logging.exception("KeyError: {}".format(e))
        except ValueError as e:
            logging.exception("ValueError: {}".format(e))

    def parse_host_protocol(self):
        table_data = []
        table_headers = [
            {"header": "File"},
            {"header": "Host IP"},
            {"header": "Host DNS"},
            {"header": "Port"},
            {"header": "Supported Protocol"},
            {"header": "Severity"}
        ]

        for input_file in self._input_files:
            input_file.seek(0)
            host_protocols = get_host_protocols(input_file)

            for values in host_protocols:
                for protocol in values["protocols"]:
                    table_data.append(
                        [
                            values["filepath"],
                            values["host_ip"],
                            values["host_dns"],
                            int(values["port"]),
                            protocol["version"],
                            protocol["severity"],
                        ]
                    )

        worksheet = self._workbook.add_worksheet("Host vs Protocol (Details)")
        self.draw_table(worksheet, table_headers, table_data)

    def parse_host_protocols(self):
        table_data = []
        table_headers = [
            {"header": "File"},
            {"header": "Host IP"},
            {"header": "Host DNS"},
            {"header": "Port"}
        ]

        for protocol in config.protocols:
            table_headers.append({"header": protocol})

        try:
            for input_file in self._input_files:
                input_file.seek(0)
                host_protocols = get_host_protocols(input_file)

                for values in host_protocols:
                    table_data.append(reindex(table_headers, values))

            worksheet = self._workbook.add_worksheet("Host vs Protocols")
            self.draw_table(worksheet, table_headers, table_data)
        except KeyError as e:
            logging.exception("KeyError: {}".format(e))
        except ValueError as e:
            logging.exception("ValueError: {}".format(e))

    def parse_host_vulnerability(self):
        table_data = []
        table_headers = [
            {"header": "File"},
            {"header": "Host IP"},
            {"header": "Host DNS"},
            {"header": "Port"},
            {"header": "Vulnerability"},
            {"header": "Severity"},
            {"header": "CVE"},
            {"header": "Information"}
        ]

        for input_file in self._input_files:
            input_file.seek(0)
            host_vulnerabilities = get_host_vulnerabilities(input_file)

            for values in host_vulnerabilities:
                for vulnerability in values["vulnerabilities"]:
                    table_data.append(
                        [
                            values["filepath"],
                            values["host_ip"],
                            values["host_dns"],
                            int(values["port"]),
                            vulnerability["vulnerability"],
                            vulnerability["severity"],
                            vulnerability["cve"],
                            vulnerability["information"]
                        ]
                    )

        worksheet = self._workbook.add_worksheet("Host vs Vulnerability (Details)")
        self.draw_table(worksheet, table_headers, table_data)

    def parse_host_vulnerabilities(self):
        table_data = []
        table_headers = [
            {"header": "File"},
            {"header": "Host IP"},
            {"header": "Host DNS"},
            {"header": "Port"}
        ]

        for values in config.vulnerabilities.values():
            table_headers.append({"header": values["name"]})

        try:
            for input_file in self._input_files:
                input_file.seek(0)
                host_vulnerabilities = get_host_vulnerabilities(input_file)

                for values in host_vulnerabilities:
                    table_data.append(reindex(table_headers, values))

            worksheet = self._workbook.add_worksheet("Host vs Vulnerabilities")
            self.draw_table(worksheet, table_headers, table_data)
        except KeyError as e:
            logging.exception("KeyError: {}".format(e))
        except ValueError as e:
            logging.exception("ValueError: {}".format(e))


def reindex(table_headers, d):
    results = [None for y in range(len(table_headers))]

    results[table_headers.index({'header': 'File'})] = d["filepath"]
    results[table_headers.index({'header': 'Host IP'})] = d["host_ip"]
    results[table_headers.index({'header': 'Host DNS'})] = d["host_dns"]
    results[table_headers.index({'header': 'Port'})] = d["port"]

    for key, values in d.items():
        if isinstance(values, list):
            for value in values:
                try:
                    if key in {"certificates", "vulnerabilities"}:
                        results[table_headers.index(
                            {'header': value["vulnerability"]})] = \
                            value["severity"]
                    elif key == "protocols":
                        results[table_headers.index(
                            {'header': value["version"]})] = \
                            value["is_offered"]
                except ValueError:
                    logging.exception("code needs to be inspected")

    return results


def get_host_certificates(file):
    results = []

    try:
        data = json.load(file)

        for values in data["scanResult"]:
            certificates = []

            for serverDefault in values["serverDefaults"]:
                if serverDefault["id"] in config.certificates.keys():
                    certificates.append(
                        {
                            "vulnerability": config.
                            certificates[serverDefault["id"]]["name"],
                            "severity": serverDefault["severity"],
                            "information":  serverDefault["finding"]
                        }
                    )

            results.append(
                {
                    "filepath": Path(file.name).resolve().as_posix(),
                    "host_ip": values["ip"],
                    "host_dns": values["targetHost"],
                    "port": int(values["port"]),
                    "certificates": certificates
                }
            )
    except KeyError as e:
        print("KeyError - skipping " + file.name)
        #logging.exception("KeyError: {}".format(e))
    except ValueError as e:
        print("KeyError - skipping " + file.name)
        #logging.exception("ValueError: {}".format(e))

    return results


def get_host_protocols(file):
    results = []

    try:
        data = json.load(file)

        for values in data["scanResult"]:
            protocols = []

            for protocol in values["protocols"]:
                if protocol["id"] in config.protocols:
                    if "not offered" not in protocol["finding"]:
                        protocols.append(
                            {
                                "version": protocol["id"],
                                "is_offered": "YES",
                                "severity": protocol["severity"]
                            }
                        )
                    else:
                        protocols.append(
                            {
                                "version": protocol["id"],
                                "is_offered": "NO",
                                "severity": protocol["severity"]
                            }
                        )

            results.append(
                {
                    "filepath": Path(file.name).resolve().as_posix(),
                    "host_ip": values["ip"],
                    "host_dns": values["targetHost"],
                    "port": int(values["port"]),
                    "protocols": protocols
                }
            )
    except KeyError as e:
        print("KeyError - skipping " + file.name)
        #logging.exception("KeyError: {}".format(e))
    except ValueError as e:
        print("ValueError - skipping " + file.name)
        #logging.exception("ValueError: {}".format(e))

    return results


def get_host_vulnerabilities(file):
    results = []

    try:
        data = json.load(file)

        for values in data["scanResult"]:
            vulnerabilities = []

            for vulnerability in values["vulnerabilities"]:
                if vulnerability["id"] in config.vulnerabilities.keys():
                    vulnerabilities.append(
                        {
                            "vulnerability": config.
                            vulnerabilities[vulnerability["id"]]["name"],
                            "severity": vulnerability["severity"],
                            "cve": vulnerability.get("cve", "N/A")
                            .replace(" ", ";"),
                            "information": vulnerability["finding"]
                        }
                    )

            for vulnerability in values["ciphers"]:
                if vulnerability["id"] in config.vulnerabilities.keys():
                    vulnerabilities.append(
                        {
                            "vulnerability": config.
                            vulnerabilities[vulnerability["id"]]["name"],
                            "severity": vulnerability["severity"],
                            "cve": vulnerability.get("cwe", "N/A")
                            .replace(" ", ";"),
                            "information": vulnerability["finding"]
                        }
                    )

            results.append(
                {
                    "filepath": Path(file.name).resolve().as_posix(),
                    "host_ip": values["ip"],
                    "host_dns": values["targetHost"],
                    "port": int(values["port"]),
                    "vulnerabilities": vulnerabilities
                }
            )
    except KeyError as e:
        print("KeyError - skipping " + file.name)
        #logging.exception("KeyError: {}".format(e))
    except ValueError as e:
        print("ValueError - skipping " + file.name)
        #logging.exception("ValueError: {}".format(e))

    return results
